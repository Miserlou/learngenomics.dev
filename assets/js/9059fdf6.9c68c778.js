"use strict";(self.webpackChunklearngenomics_dev=self.webpackChunklearngenomics_dev||[]).push([[355],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return f}});var i=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=i.createContext({}),p=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},c=function(e){var t=p(e.components);return i.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},d=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=p(n),f=a,g=d["".concat(s,".").concat(f)]||d[f]||m[f]||o;return n?i.createElement(g,r(r({ref:t},c),{},{components:n})):i.createElement(g,r({ref:t},c))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,r=new Array(o);r[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,r[1]=l;for(var p=2;p<o;p++)r[p]=n[p];return i.createElement.apply(null,r)}return i.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3072:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return s},default:function(){return f},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return m}});var i=n(7462),a=n(3366),o=(n(7294),n(3905)),r=["components"],l={},s="Compression and BGZF",p={unversionedId:"genomic-file-formats/compression-and-BGZF",id:"genomic-file-formats/compression-and-BGZF",title:"Compression and BGZF",description:"Overview",source:"@site/docs/04-genomic-file-formats/01-compression-and-BGZF.md",sourceDirName:"04-genomic-file-formats",slug:"/genomic-file-formats/compression-and-BGZF",permalink:"/docs/genomic-file-formats/compression-and-BGZF",draft:!1,editUrl:"https://github.com/stjude/learngenomics.dev/tree/main/docs/04-genomic-file-formats/01-compression-and-BGZF.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Genomic File Formats",permalink:"/docs/genomic-file-formats/"},next:{title:"FASTQ Files",permalink:"/docs/genomic-file-formats/FASTQ-files"}},c={},m=[{value:"Overview",id:"overview",level:2},{value:"Comparison with Gzip",id:"comparison-with-gzip",level:2},{value:"Worked Example",id:"worked-example",level:3}],d={toc:m};function f(e){var t=e.components,l=(0,a.Z)(e,r);return(0,o.kt)("wrapper",(0,i.Z)({},d,l,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"compression-and-bgzf"},"Compression and BGZF"),(0,o.kt)("h2",{id:"overview"},"Overview"),(0,o.kt)("p",null,"The BGZF compression technique and\nassociated\xa0",(0,o.kt)("a",{parentName:"p",href:"http://www.htslib.org/doc/bgzip.html"},"bgzip"),"/",(0,o.kt)("a",{parentName:"p",href:"https://www.htslib.org/doc/tabix.html"},"tabix"),'\xa0tools\nwere developed as general purpose utilities to enable random access lookup in\ncompressed tab-delimited text files. By default, the\xa0gzip\xa0compression algorithm\ncreates a single stream of data\u2014accessing information in the middle of that\ncompressed stream requires decompressing the stream from the beginning. Genomic\nfiles tend to be substantial in size, so decompressing an entire file to\nretrieve information is a waste of time and resources. The BGZF compression\ntechnique solves this problem by creating multiple gzip streams as contiguous\n"blocks" and storing the offsets to each block in an associated\xa0',(0,o.kt)("strong",{parentName:"p"},"index file"),".\nIn this case, you can retrieve a subset of information from the file by seeking\npast all of the irrelevant BGZF blocks (avoiding the associated computational\noverhead) and only decompressing the block that contains the information you\nwant."),(0,o.kt)("p",null,"Consider a single, bgzipped BAM file with the name\xa0",(0,o.kt)("inlineCode",{parentName:"p"},"Sample.bam"),". This file will\ntypically be accompanied by an index called\xa0",(0,o.kt)("inlineCode",{parentName:"p"},"Sample.bam.bai"),", which contains\noffsets to the BGZF blocks. These two files are often treated as an inseperable\npair: without the index file, it is impossible to navigate the large BAM file\neffectively (though it is trivial to generate another index, as we will see)."),(0,o.kt)("p",null,'For detailed information on BGZF, see "The BGZF compression format" section\nin\xa0',(0,o.kt)("a",{parentName:"p",href:"http://samtools.github.io/hts-specs/SAMv1.pdf"},"the SAM file specification"),"."),(0,o.kt)("h2",{id:"comparison-with-gzip"},"Comparison with Gzip"),(0,o.kt)("p",null,"Below is a simple comparison of\xa0",(0,o.kt)("inlineCode",{parentName:"p"},"gzip"),"\xa0versus\xa0",(0,o.kt)("inlineCode",{parentName:"p"},"bgzip"),"\xa0to illustrate the\ntrade-off. Note that while\xa0",(0,o.kt)("inlineCode",{parentName:"p"},"gzip"),"\xa0achieves a slight edge in compression ratio,\nthe\xa0",(0,o.kt)("inlineCode",{parentName:"p"},"bgzip"),"/",(0,o.kt)("inlineCode",{parentName:"p"},"tabix"),"\xa0pair is vastly superior in lookup time. This non-linear\ntrade-off between compression and random-access speed is why BGZF is largely\npervasive in the field of computational genomics."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Figure depicting the differences between GZIP and BGZF with multiple GZIP streams (blocks) being included in the BGZF file",src:n(7305).Z,width:"3300",height:"1363"})),(0,o.kt)("h3",{id:"worked-example"},"Worked Example"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"First, we'll start by downloading the GENCODE gene model v32. We'll remove\nthe header line and then sort by chromosome name then genomic start location\n(numerically), as that is what ",(0,o.kt)("inlineCode",{parentName:"p"},"bgzip")," expects."),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'GENCODE_GTF="ftp://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_32/gencode.v32.chr_patch_hapl_scaff.annotation.gtf.gz"\n\ncurl "$GENCODE_GTF" \\                        # Download GTF\n  | gunzip \\                                 # Decompress\n  | grep -v "^#" \\                           # Remove header lines\n  | sort -k1,1 -k4,4n > gencode.v32.all.gtf  # Sort by chromosome name then genomic start location (numerically)\n'))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Next, we'll compress the file using both ",(0,o.kt)("inlineCode",{parentName:"p"},"gzip")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"bgzip"),". To keep things\nfair but running at a decent clip, we'll choose a compression value of ",(0,o.kt)("inlineCode",{parentName:"p"},"5"),"\nfor both of the commands."),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"gzip -c -5 gencode.v32.all.gtf > gencode.v32.all.gtf.gzipped\nbgzip -c -l 5 gencode.v32.all.gtf > gencode.v32.all.gtf.bgzipped\n\nls -lah\n# Permissions Size Date Modified Name\n# .rw-r--r--  1.4G 18 Aug 12:51  gencode.v32.all.gtf\n# .rw-r--r--   64M 18 Aug 12:52  gencode.v32.all.gtf.bgzipped\n# .rw-r--r--   52M 18 Aug 12:52  gencode.v32.all.gtf.gzipped\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Now that we have our two files, we'll need to generate the index for the\nbgzip file. Here, we show the effect of trying to generate an index for the\nregular ",(0,o.kt)("inlineCode",{parentName:"p"},"gzip"),"-ed file as well."),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"tabix -p gff gencode.v32.all.gtf.gzipped\n# [tabix] the compression of 'gencode.v32.all.gtf.gzipped' is not BGZF\n\ntabix -p gff gencode.v32.all.gtf.bgzipped\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Last, let's assume we are wanting all entries for the ",(0,o.kt)("inlineCode",{parentName:"p"},"NOTCH1")," gene. Here is\nhow you might do that in both zipping styles with the associated lookup times\nfor each."),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'time (zgrep "gene_name=NOTCH1" gencode.v32.all.gtf.gzipped &> /dev/null)\n\n# ( zgrep "gene_name=NOTCH1" gencode.v32.all.gtf.gzipped &> /dev/null; )  20.60s user 0.05s system 99% cpu 20.693 total\n\ntime (tabix gencode.v32.all.gtf.bgzipped chr9:136,496,070-136,545,786 &> /dev/null)\n\n# ( tabix gencode.v32.all.gtf.bgzipped chr9:136,496,070-136,545,786 &> /dev/nul)  0.01s user 0.00s system 83% cpu 0.018 total\n')))))}f.isMDXComponent=!0},7305:function(e,t,n){t.Z=n.p+"assets/images/4.1-GZIP-vs-BGZF-a9b264ea3bacb96ed2ed8542f5c92733.jpg"}}]);