"use strict";(self.webpackChunklearngenomics_dev=self.webpackChunklearngenomics_dev||[]).push([[551],{3905:function(e,t,n){n.d(t,{Zo:function(){return f},kt:function(){return m}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},f=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},A=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,f=l(e,["components","mdxType","originalType","parentName"]),A=c(n),m=r,u=A["".concat(s,".").concat(m)]||A[m]||p[m]||i;return n?a.createElement(u,o(o({ref:t},f),{},{components:n})):a.createElement(u,o({ref:t},f))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=A;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var c=2;c<i;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}A.displayName="MDXCreateElement"},434:function(e,t,n){n.r(t),n.d(t,{assets:function(){return f},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return p}});var a=n(7462),r=n(3366),i=(n(7294),n(3905)),o=["components"],l={},s="FASTQ Files",c={unversionedId:"genomic-file-formats/FASTQ-files",id:"genomic-file-formats/FASTQ-files",title:"FASTQ Files",description:"For most workflows in computational genomics, the input files are in the FASTQ",source:"@site/docs/04-genomic-file-formats/02-FASTQ-files.md",sourceDirName:"04-genomic-file-formats",slug:"/genomic-file-formats/FASTQ-files",permalink:"/docs/genomic-file-formats/FASTQ-files",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/04-genomic-file-formats/02-FASTQ-files.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Compression and BGZF",permalink:"/docs/genomic-file-formats/compression-and-BGZF"},next:{title:"BAM Files",permalink:"/docs/genomic-file-formats/BAM-files"}},f={},p=[],A={toc:p};function m(e){var t=e.components,l=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},A,l,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"fastq-files"},"FASTQ Files"),(0,i.kt)("p",null,"For most workflows in computational genomics, the input files are in the FASTQ\nformat.\xa0",(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/FASTQ_format"},"The dedicated Wikipedia\npage"),"\xa0for the FASTQ file is quite\ngood, so we recommend you take a look before starting this section. As a\nreminder, this guide focuses on Illumina-produced FASTQ files, though the\nconcepts are generally applicable to most sequencers today."),(0,i.kt)("p",null,"Technically speaking, FASTQ files are not a direct product of sequencers as many\nhave their own intermediate representation of the reads (e.g.\xa0",(0,i.kt)("a",{parentName:"p",href:"https://www.illumina.com/informatics/sequencing-data-analysis/sequence-file-formats.html"},"BCL\nfiles"),"\xa0for\nIllumina sequencers) that need to be translated into FASTQ files (using a tool\nlike\xa0",(0,i.kt)("a",{parentName:"p",href:"https://support.illumina.com/sequencing/sequencing_software/bcl2fastq-conversion-software.html"},"bcl2fastq"),").\nIn practice, many sequencing cores do this translation step before sending the\ndata to the computational engineers downstream."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Depiction of a symbolic pair of FASTQ files followed by a single FASTQ file example",src:n(6773).Z,width:"2178",height:"1119"})),(0,i.kt)("p",null,"A FASTQ file may come as either a single file or an inseparable pair of files\nfor single-end or paired-end sequencing respectively. A FASTQ file contains\nmany\xa0reads, which, as noted before, are fragments of DNA/RNA read by the\nsequencer. Each read in the file has the following four-line structure separated\nby newlines."),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"th"},"Line Number")),(0,i.kt)("th",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"th"},"Line Description")))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"1"),(0,i.kt)("td",{parentName:"tr",align:null},"The sequence name, which on modern Illumina sequencers, this is a coordinate system dictating where the read originated from on the flow cell")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"2"),(0,i.kt)("td",{parentName:"tr",align:null},"The sequence of the DNA fragment")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"3"),(0,i.kt)("td",{parentName:"tr",align:null},'A single + delimiter character, often referred to as the "plus line"')),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"4"),(0,i.kt)("td",{parentName:"tr",align:null},"The associated quality scores, one per nucleotide coordinating with line 2; generally an ASCII encoded probability score of incorrectness")))),(0,i.kt)("p",null,'Random access within FASTQ files is not typical\u2014generally, FASTQs are used\nsolely as input to some alignment process, which then produces a BAM file\u2014so\nthey are gzipped (not bgzipped) to save space. Conventionally, FASTQ file names\nindicate which read the files contains (e.g.\xa0Sample.fastq.gz\xa0for single-end\nsequencing or\xa0Sample_R1.fastq.gz\xa0and\xa0Sample_R2.fastq.gz\xa0in paired-end sequencing\nwhere\xa0_R1\xa0stands for "read one(s)" and\xa0_R2\xa0stands for "read two(s)").'),(0,i.kt)("p",null,"Note that in the case of paired-end sequencing, it is crucial that each of the FASTQ files list their reads in same order. If even one read is deleted from either file, the entire read pairing will be off, which will have disastrous results during the alignment phase. To catch common formatting errors in single-end or paired-end FASTQ files, consider using\xa0",(0,i.kt)("a",{parentName:"p",href:"https://github.com/stjude/fqlib"},"fqlib"),"\xa0(specifically, the\xa0lint\xa0subcommand)."),(0,i.kt)("p",null,"Below is an example of the first four lines of a pair of FASTQ files generated by\xa0fq generate\xa0and validated by\xa0fq lint."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"fq generate --n-records 2 Sample_R1.fastq.gz Sample_R2.fastq.gz\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"gzip -dc Sample_R1.fastq.gz\n\n# @fqlib5:334:VVDJXFE:4:5:7053:1012/1\n# CCTTTTCCCGCAGTCGTCAGCAGTAAGTGTGCGACCGGTAGTTCAAAAGGGGAATATCACCCGCTATTTTGCGAATACTAGAGCCTCGGTTCACGCAAGCA\n# +\n# GFGDDB@CJCHDBDBDB@JACCIE@J@GD@FHFADAIEA@@ABBEADHBFH@CIEFBBHGCHEJHEAIHAAIHBGEH@EDGAEEC@FGEABAHE@FAI@IC\n# @fqlib5:334:VVDJXFE:7:33:2310:7985/1\n# ACGTGGCCGTCCTTTTGCCAGATATCGGTAAGAGAGTTCTAGCTAAGATAATATCAATCCGCGAATGTCAGAGGGAGTGTTTCCCTTCCGGGGAAGCAAAT\n# +\n# GDGE@DBJJCBHCGFEBHDGEI@JA@GHEHA@CCJGCGGDJGBACIBGECDDBGBHI@GBAEBBJD@@BAFBHAHEHJCBGFGCA@GJ@IAAIJDHG@IDC\n\ngzip -dc Sample_R2.fastq.gz\n\n# @fqlib5:334:VVDJXFE:4:5:7053:1012/2\n# ATGCCAATGGGAAGCTCGGGTAGTTCTTTCATCATGGTAATAAATCGACCGAACAACCGTTCAGGGCCAGATGAAAAGGGCCTGGCGTCTGGCACAGACCC\n# +\n# FGDFEHBCJFDFCFHEHFGEEADCBEF@JJD@HEGE@@AIIIDHGHADEAHA@D@DCAGBFH@HBDGICI@ICAAGJBCDDGEFJ@JBHGJFACEECJEJJ\n# @fqlib5:334:VVDJXFE:7:33:2310:7985/2\n# GCCCGTAGCAATACTCCTTGCGGGGACGATTATGGCGTTAATCTGATATCTCAAGCAGTAGTGGGGCTATACACTTGCGCCGTAGTCGAGCGGTTTGTAGT\n# +\n# DIGCJJHDCEDDDAGH@FFGHFEAB@JDA@@HH@AJJIHJCA@JFHGAHA@CCGJDF@BJ@AH@B@BH@JCCEIDCIFCED@E@D@II@HBJIADG@EFDB\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"fq lint Sample_R1.fastq.gz Sample_R2.fastq.gz\n\n# Exit code is 0, which means all went well.\n\n# Simulate a missing quality score, which would be a malformed file.\n\nzcat Sample_R2.fastq.gz | head -n 7 | gzip -c > Sample_R2.bad.fastq.gz\n\nfq lint Sample_R1.fastq.gz Sample_R2.bad.fastq.gz\n\n# Sample_R2.bad.fastq.gz:8:1: [S004] CompleteValidator: Incomplete record: quality is empty\n")))}m.isMDXComponent=!0},6773:function(e,t,n){t.Z=n.p+"assets/images/4.2-FASTQ-Files-c944f8a44be9a3832bf9f2d21de420a8.jpg"}}]);